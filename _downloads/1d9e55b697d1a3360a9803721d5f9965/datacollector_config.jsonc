{
    "$schema": "./schemas/datacollector_config_schema.jsonc",
    "env-spec": {
        "assets": { // Configure assets that can be spawned in the sim
            "AirTaxi": {
                "source": "GLTF", //Choose between GLTF/UnrealProject
                "file-name": "./../assets/AirTaxi.glb",
                "scale": [
                    0.9,
                    0.9,
                    0.9
                ],
                "rotation": [
                    1.0,
                    0.0,
                    0.0,
                    0.0
                ],
                "seg-id": 125, // See docs for seg-id - colour map
                "type": "AirTaxi",
                "origin_xyz": [
                    33.032079,
                    -97.284227,
                    350.0
                ],
                "randomizations": {
                    "texture": [ // Texture randomization.
                        "default" // List of different textures to choose from.
                    ],
                    "scale": {
                        "amount": 2, // Number of variations to produce.
                        "upper_bound": 100, // Upper bound of the scale factor.
                        "lower_bound": 50 // Lower bound of the scale factor.
                    },
                    "rotation": {
                        "amount": 2, // Number of variations to produce.
                        "upper_bound": 90.0, // Upper bound of rotation, in degrees.
                        "lower_bound": -90.0, // Lower bound of rotation, in degrees.
                        "axis": "roll" // Axis for rotation.
                    },
                    "translation": {
                        "amount": 2, // Number of variations to produce.
                        "upper_bound": 15.0, // Upper bound of translation, in latitude.
                        "lower_bound": 0.0, // Lower bound of translation, in longitude.
                        "axis": "z" // Axis for translation.
                    },
                    "flip": {
                        "axis": "roll", // Axis for flipping.
                        "initial_rpy": [
                            20,
                            0,
                            0
                        ] // Starting roll, pitch, yaw of the object.
                    }
                }
            },
            "BasicLandingPad": {
                "source": "UnrealProject", //Choose between GLTF/UnrealProject
                "file-name": "basicLandingPad", // Name of baked in asset
                "scale": [
                    3,
                    3,
                    3
                ],
                "rotation": [
                    0,
                    0,
                    0,
                    0
                ],
                "seg-id": 127, // See docs for seg-id - colour map
                "type": "BasicLandingPad",
                "origin_xyz": [
                    33.032079,
                    -97.284227,
                    350.0
                ],
                "randomizations": {}
            }
        },
        "weather": [ // Dict(WeatherParameter, WeatherIntensityRange(0.0-1.0)Array [start, end, step])
            {
                "type": "RAIN",
                "intensity": [
                    0.1,
                    0.8,
                    0.6
                ]
            },
            {
                "type": "SNOW",
                "intensity": [
                    0.1,
                    0.8,
                    0.6
                ]
            }
        ], //See projectairsim.types.WeatherParameter class for weather types
        "time-of-day": [ //[date, start-time, end-time, step]
            "2022-06-20",
            "7:15 AM",
            "12:15 PM",
            "4:00:00"
        ],
        "scene-configs": {
            "DFW_Forward": "scene_data_collector_dfw_forward.jsonc",
            "DFW_Downward": "scene_data_collector_dfw_downward.jsonc",
            "Blocks": "scene_basic_drone.jsonc"
        }
    },
    "collection-spec": {
        "trajectory-spec": { // Define presets for trajectories
            "forward-facing-cam": {
                "cylindrical": { //Define params for given trajectory type
                    "trajectory-len": 50, //num points in trajectory
                    "altitude-change": 4, //m
                    "outer-radius": 20, //m
                    "inner-radius": 18, //m
                    "angular-variation": 2
                }
            },
            "downward-facing-cam": {
                "takeoff-landing": { //Define params for given trajectory type
                    "trajectory-len": 10, //num points in trajectory TODO - fix
                    "altitude-change": 20, //m
                    "radius": 7 // radius of landing pad (area you want to sweep) in m
                },
                "conic": { //Define params for given trajectory type
                    "trajectory-len": 50, //num points in trajectory
                    "altitude-change": 15, //m
                    "FOV": 45 //deg
                }
            },
            "A2B-trajectory": {
                "port2port": {
                    "trajectory-type": "optimal", //[random, optimal]
                    "trajectory-len": 50, //length of each trajectory
                    "start-geo": [ //lat,lon,alt
                        33.04735,
                        -97.292663,
                        230.0
                    ],
                    "end-geo": [ //lat,lon,alt
                        33.0483088,
                        -97.294278,
                        233.5999
                    ] 
                }
            },
            "EnvActor-trajectory": {
                "port2port": {
                    "trajectory-type": "random", //[random, optimal]
                    "num-trajectories": 3, //if random, num of random trajectories
                    "trajectory-len": 10, //length of each trajectory
                    "start-geo": [ //lat,lon,alt
                        33.0476787817,
                        -97.291908524,
                        264.4
                    ],
                    "end-geo": [ //lat,lon,alt
                        33.0483088,
                        -97.294278,
                        255.4
                    ]
                }
            }
        },
        "geo-locations": { // Location Coordinates
            "DFW-forward": {
                "latitude": 33.032079,
                "longitude": -97.284227,
                "altitude": 350,
                "trajectory": "forward-facing-cam", //select from one of the preset-trajectories
                "scene-name": "DFW",
                "scene-config": "DFW_Forward",
                "asset": "AirTaxi", // Choose from one of the above configured assets
                "object-id": "airtaxi" // Unique id for spawned object
            },
            "DFW-downward": {
                "latitude": 33.032948,
                "longitude": -97.274183,
                "altitude": 275,
                "trajectory": "downward-facing-cam", //select from one of the preset-trajectories
                "scene-name": "DFW",
                "scene-config": "DFW_Downward",
                "asset": "BasicLandingPad", // Choose from one of the above configured assets
                "object-id": "landing_pad" // Unique id for spawned object
            },
            "Blocks-port2port": {
                "trajectory": "A2B-trajectory", //select from one of the preset-trajectories
                "scene-name": "Block",
                "scene-config": "Blocks",
                "asset": "Cone", // Asset already in the scene
                "object-id": "Cone_5",
                "env-actor-name": "TestEnvActor", // as configured in above scene config
                "env-actor-trajectory": {
                    "name": "EnvActor-trajectory", //preset-trajectory or "pre-defined"
                    "loop": true,
                    "time-offset": 0, //seconds
                    "duration": 10 //duration of each loop
                }
            }
        },
        "data-spec": // Add all sensor data/annotations to be collected
        {
            "modalities": { // Sensor modalities to be collected. Currently supported - RGB
                "RGB": true
            },
            "annotations": { // Annotations to be collected/saved. Currently supported - 2DBBox, 3DBBox, segmentation
                "2DBBox": true, // Collects 2D bbox
                "3DBBox": true, // Collects 3D bbox
                "segmentation": true // Collects Segmentation data and saves to COCO JSON
            }
        }
    },
    "augmentation-spec": {
        "2DBBox": {
            "enabled": true
        },
        "augmentations": {
            "horizontal-flip": { //Flip horizontally around the y-axis.
                "enabled": true,
                "p": 1 //probability of applying the transform. Default: 1.
            },
            "vertical-flip": { //Flip horizontally around the x-axis.
                "enabled": true,
                "p": 1
            },
            "crop": { //Crop a random part of the input
                "enabled": true,
                "crop-height": 224, //Height of cropped image
                "crop-width": 224, //Width of cropped image
                "p": 1
            },
            "rotate": { //Rotate the input by an angle selected randomly from the uniform distribution
                "enabled": true,
                "angular-limit": 180, //Rotation angle selected from range(-limit, limit)
                "p": 1
            },
            "affine-transform": { //Apply affine transformations to image
                "enabled": true,
                "translate-percent": 0.05, //Translation as a fraction of the image height/width. Select value from (0,1)
                "scale": 0.95, //Scaling factor. range(0,1)
                "shear": 5, //Shear image along x-axis with angle in range(-angle, angle)
                "p": 1
            },
            "brightness-contrast": { //Randomly change brightness and contrast of the input image
                "enabled": true,
                "brightness-limit": 0.5, //factor range for changing brightness. Select value from (0,1)
                "contrast-limit": 0.2, //factor range for changing contrast. Select value from (0,1)
                "p": 1
            },
            "hue-saturation-value": { //Randomly change hue, saturation and value of the input image
                "enabled": true,
                "hue-shift-limit": 20, //hue shift randomly selected from range(-limit, limit)
                "saturation-shift-limit": 50, //sat shift randomly selected from range(-limit, limit)
                "value-shift-limit": 30, //value shift randomly selected from range(-limit, limit)
                "p": 1
            },
            "motion-blur": { //Apply motion blur to the input image using a random-sized kernel
                "enabled": true,
                "blur-limit": 41, //maximum kernel size for blurring the input image. Must be a odd number
                "p": 1
            },
            "gaussian-noise": { //Apply gaussian noise to the input image
                "enabled": true,
                "variance-limit": 200, //variance range for noise
                "p": 1
            }
        }
    },
    "output-spec": {
        "description": "500k dataset collected for AI-Block#1.2 training. Contains 3 types of aerial obstacles: airtaxi, cooltaxi, and supercooltaxi",
        "operational-description": "takeoff and landing for H-type landing pad with single instance of landing pad in each image",
        "data-description": "2D bbox that surrounds the landing pad",
        "data-source": "All data pieces are generated using Project Airsim. The DFW environment is provided by Bing Maps",
        "error-sources": "None. Data is generated through the Project Airsim sim and is 100% synthetic",
        "dataset-name": "SampleDataset",
        "image-spec": {
            "image-width": 400,
            "image-height": 225,
            "image-format": ".png"
        }
    }
}